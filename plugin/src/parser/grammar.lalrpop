// taken from https://github.com/lalrpop/lalrpop/blob/793df8d6b4fa1c1bc9c253ee7c173d25cb202a9d/doc/calculator/src/calculator6.lalrpop
// Copyright (c) 2015 The LALRPOP Project Developers
// used under the MIT license:
// https://github.com/lalrpop/lalrpop/blob/793df8d6b4fa1c1bc9c253ee7c173d25cb202a9d/LICENSE-MIT

use std::str::FromStr;
use crate::ast::{Expr, Operator};

use lalrpop_util::ParseError;

grammar;

Tier<Op, NextTier>: Expr<'input> = {
    <l: Tier<Op, NextTier>> <op: Op> <r: NextTier> => Expr::Binary(op, Box::new(l), Box::new(r)),
    NextTier
};

pub Expr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

ExprOp: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Sub,
};

FactorOp: Operator = {
    "*" => Operator::Mul,
    "/" => Operator::Div,
};

Term: Expr<'input> = {
    Num => Expr::Number(<>),
    Var => Expr::Variable(<>),
    "(" <Expr> ")"
};

Num: i32 = {
    r"[0-9]+" =>? i32::from_str(<>)
        .map_err(|_| ParseError::User {
            error: "number is too big"
        })
};

Var: &'input str = {
    r"[_\p{ID_Start}][_\p{ID_Continue}-]*"
};
